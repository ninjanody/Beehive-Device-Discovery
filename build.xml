<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright 2013-2015, Juha Lindfors. All rights reserved.

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation; either version 3 of the
  License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public
  License along with this program; if not, see
  http://www.gnu.org/licenses/.

-->

<!--
 |  AVAILABLE TARGETS:
 |
 |  This is a project specific build file. The project template is
 |  imported at the beginning of the file which includes common task definitions
 |  and default project targets:
 |
 |    - compile             to compile all Java sources
 |    - unit-test           to execute all Java unit tests
 |    - clean               removes all generated files
 |
 |
 |  CLASSPATHS:
 |
 |  You  can  customize  classpaths  by  editing  the  'java.compile.classpath'  and
 |  'java.test.compile.classpath' paths defined below. Note however that any libraries placed
 |  under project /lib/libraryname-verson and /build/libraryname-version directories will be
 |  automatically added to compiler and runtime execution classpaths. It is recommended that
 |  you use the above-mentioned convention to add libraries unless there's a specific requirement
 |  that doesn't allow you to do so. The project /lib/libraryname-version should be used for
 |  libraries that are runtime dependencies to the project distributable and therefore required
 |  for the project executable to run. The /build/libraryname-version can be used for libraries
 |  that are *only* required at compile time but are *not* required at runtime when the project
 |  executable is run.
 |
 |
 |  EXTENSIONS:
 |
 |  The project template may be extended by adding targets to the
 |  following extensions points:
 |
 |    -before-compile, -after-compile
 |    -before-unit-test-compile, -after-unit-test-compile
 |    -before-unit-test, -after-unit-test
 |
 |  To add individual project targets to default target dependency graphs, create an
 |  extension target such as:
 |
 |    <target name = "verify-results" extensionOf = "-after-unit-test">
 |
 |
 |  Following user defined properties may be set for pre-defined tasks. Add the property
 |  definitions to this build file (or build.properties or local.properties file) according
 |  to the convention:
 |
 |    - Properties with prefix 'unit.test.user' will be passed as system properties to
 |      the unit test JVM
 |
 |
 |  Author: Juha Lindfors
 +-->

<project name = "Beehive Device Discovery" default = "unit-test" basedir = ".">


  <!--
   | Imports the project template. Do not change.
   +-->
  <import file = "build/project/auto-updated/do-not-modify/project-template.xml" as = "project-template"/>


  <!--
   | Default description of this project. The description below is displayed when then project
   | is executed with a -\-projecthelp (or -p) argument.
   |
   | EDIT to give a more precise description of the project, if necessary.
   +-->
  <description>
  --------------------------------------------------------------------
  Copyright 2013-2015, Juha Lindfors. All rights reserved.

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation; either version 3 of the
  License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public
  License along with this program; if not, see
  http://www.gnu.org/licenses/.
  --------------------------------------------------------------------


  Build file to create project ${project.name}.

  Run:

    > sh project.sh --help

  for details.


  </description>



  <!--
   | PACKAGE:
   |
   | Creates a web archive (both compressed and expanded) of the Beehive device discovery
   | application for servlet container deployment, and client deployment libraries.
   |
   +-->
  <target name = "package" extensionOf = "-after-unit-test" depends = "compile">

    <property name = "war.name" value = "BeehiveDeviceDiscovery"/>

    <echo message="--------------------------------------------------------------------"/>
    <echo message=" Packaging ${war.name}-${release.version}..."/>
    <echo message="--------------------------------------------------------------------"/>
    <echo message=""/>


    <!--
         Copy the preconfigured web directory as expanded dir structure to output. Old files
         will be overwritten...
    -->

    <copy todir = "${output.dir}/${war.name}-${release.version}" overwrite = "true">
      <fileset dir = "resources/web"/>
    </copy>


    <!-- Copy compiled classes into the WEB-INF/classes hierarchy... -->

    <copy todir = "${output.dir}/${war.name}-${release.version}/WEB-INF/classes" overwrite = "true">
      <fileset dir = "${classes.dir}">
        <exclude name = "org/openremote/beehive/discovery/client/**"/>
      </fileset>
    </copy>


    <!-- Copy client classes into client classes hierarchy... -->

    <copy todir = "${output.dir}/client/classes" overwrite = "true">

      <fileset dir = "${classes.dir}">
        <include name = "org/openremote/beehive/discovery/client/**/*.*"/>
      </fileset>

      <fileset dir = "${classes.dir}">
        <include name = "org/openremote/beehive/discovery/model/*.class"/>
      </fileset>
    </copy>

    <copy todir = "${output.dir}/client/classes/META-INF"
           file = "${resources.dir}/client/META-INF/MANIFEST.MF">
      <filterchain>
        <expandproperties/>
      </filterchain>
    </copy>


    <!-- Copy all runtime libs as flattened archive structure into WEB-INF/lib... -->

    <copy todir     = "${output.dir}/${war.name}-${release.version}/WEB-INF/lib"
          flatten   = "true"
          overwrite = "true">

      <fileset dir = "${lib.dir}">
        <include name = "**/*.jar"/>
        <exclude name = "LICENSE*"/>
      </fileset>

    </copy>

    <!-- Create a compressed Web Archive... -->

    <zip basedir = "${output.dir}/${war.name}-${release.version}"
        destfile = "${output.dir}/${war.name}-${release.version}.war" whenempty = "fail">
    </zip>


    <!-- Create a compressed Client Archive... -->

    <zip basedir = "${output.dir}/client/classes"
        destfile = "${output.dir}/client/BeehiveDiscoveryClient-${release.version}.jar" whenempty = "fail">
    </zip>


    <!-- Copy client script... -->

    <copy todir     = "${output.dir}/client"
          overwrite = "true">

      <fileset dir = "${resources.dir}/client">
        <include name = "**/*.sh"/>
      </fileset>
    </copy>


    <!-- Copy client libs as flattened archive structure client/lib... -->

    <copy todir     = "${output.dir}/client/lib"
          flatten   = "true"
          overwrite = "true">

      <fileset dir = "${lib.dir}/object-model-0.2.0">
        <include name = "**/object-model-0.2.0_WIP.jar"/>
        <exclude name = "LICENSE*"/>
      </fileset>

      <fileset dir = "${lib.dir}/javax.ws.rs-2.0">
        <include name = "**/*.jar"/>
        <exclude name = "LICENSE*"/>
      </fileset>

      <fileset dir = "${lib.dir}/jersey-bundles-2.6">
        <include name = "**/*.jar"/>
        <exclude name = "LICENSE*"/>
      </fileset>

      <fileset dir = "${lib.dir}/jersey-core-2.6" excludes = "jersey-server-*.jar" >
        <include name = "**/*.jar"/>
        <exclude name = "LICENSE*"/>
      </fileset>

      <fileset dir = "${lib.dir}/flexjson-3.2">
        <include name = "**/*.jar"/>
        <exclude name = "LICENSE*"/>
      </fileset>

    </copy>

  </target>


  <!-- ========================================================= -->
  <!--  PATH DEFINITIONS.                                        -->
  <!-- ========================================================= -->


  <!--
   | Add jars and classes that are required to compile the project here. Note that
   | all archives found under /lib/library-version/*.jar and /build/lib/library-version/*.jar
   | are automatically added to the compile classpath. It is recommended you use the above
   | two locations and the naming convention to add libraries required for compilation.
   | Libraries that are *only* required at compile phase should be under /build/lib hierarchy,
   | library dependencies required to run the project binaries should be placed under the
   | /lib hierarchy.
   |
   | If any additional locations are required to add libraries and classes to compiler's
   | classpath, add them below.
   +-->
  <path id = "java.compile.classpath">

  </path>

  <!--
   | Add jars and classes that are required to compile unit tests here. Note that
   | all classes used to compile the project, including the 'java.compile.classpath' classes
   | are automatically included. This means also all archives found under
   | /lib/library-version/*.jar and /build/lib/library-version/*.jar are automatically included
   | in the unit test compile classpath.
   |
   | If any additional locations are required to add libraries and classes to compiler's
   | classpath, add them below.
   +-->
  <path id = "java.test.compile.classpath">

  </path>

</project>

