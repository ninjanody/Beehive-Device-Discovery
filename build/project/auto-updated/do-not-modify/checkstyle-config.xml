<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.1//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_1.dtd">

<module name = "Checker">

  <module name = "TreeWalker">

    <!--
     | Use Java-style instead of C-style array declarations. String[] array instead of String array[]
     +-->
    <module name = "ArrayTypeStyle"/>


    <!--
     | Use explicit imports.
     +-->
    <module name = "AvoidStarImport"/>


    <!--
     | Checks that classes that define a covariant equals() method also override method
     | equals(java.lang.Object). Mistakenly defining a covariant equals() method without
     | overriding method equals(java.lang.Object) can produce unexpected runtime behaviour.
     +-->
    <module name = "CovariantEquals"/>


    <!--
     | Checks cyclomatic complexity against a specified limit. The complexity is measured by the
     | number of if, while, do, for, ?:, catch, switch, case statements, and operators &&
     | and || (plus one) in the body of a constructor, method, static initializer, or
     | instance initializer. It is a measure of the minimum number of possible paths through
     | the source and therefore the number of required tests. Generally 1-4 is considered good,
     | 5-7 ok, 8-10 consider re-factoring, and 11+ re-factor now!
     +-->
    <module name = "CyclomaticComplexity">
      <property name = "severity" value = "warning"/>
      <property name = "max" value = "11"/>
    </module>


    <!--
     | Check that the default is after all the cases in a switch statement. Java allows default
     | anywhere within the switch statement. But it is more readable if it comes after the last
     | case.
     +-->
    <module name = "DefaultComesLast"/>


    <!--
     | Disallow empty blocks for :
     |
     |  - catch, do, else, finally, if, for, try, while statements
     |  - instance initializers and static initializers
     +-->
    <module name = "EmptyBlock"/>


    <!--
     \ Disallow an empty statement (a ; without body)
     +-->
    <module name = "EmptyStatement"/>


    <!--
     | Checks that classes that override equals() also override hashCode(). The contract of
     | equals() and hashCode() requires that equal objects have the same hashCode. Hence,
     | whenever you override equals() you must override hashCode() to ensure that your class
     | can be used in collections that are hash based.
     +-->
    <module name = "EqualsHashCode"/>


    <!--
     | Checks that the whitespace around the Generic tokens < and > is correct to the
     | typical convention.
     |
     | Allowed:
     |   List<List<Integer>> y = new ArrayList<List<Integer>>();
     |
     | Not Allowed:
     |   List < List < Integer > > y = new ArrayList < List < Integer > > ();
     +-->
    <module name = "GenericWhitespace"/>


    <!--
     | Make sure that utility classes (classes that contain only static methods or fields in
     | their API) do not have a public constructor. Instantiating utility classes does not
     | make sense. Hence the constructors should either be private or (if you want to allow
     | subclassing) protected.
     +-->
    <module name = "HideUtilityClassConstructor"/>


    <!--
     | Checks for imports from a set of illegal packages. By default, the check rejects all
     | sun.* packages.
     +-->
    <module name = "IllegalImport"/>


    <!--
     | Ensure indentation according to source code formatting conventations:
     |
     |  - offset two spaces
     |  - brace adjustment zero spaces
     |  - case label indent two spaces
     |  - throws clause indent on next line four spaces
     +-->
    <module name = "Indentation">
      <property name = "basicOffset" value = "2"/>
      <property name = "caseIndent" value = "2"/>
    </module>


    <!--
     | Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);.
     | With the exception of for iterators, all assignments should occur in their own toplevel
     | statement to increase readability. With inner assignments like the above it is difficult
     | to see all places where a variable is set.
     +-->
    <module name = "InnerAssignment"/>


    <!--
     | Check nested (internal) classes/interfaces are declared at the bottom of the class after
     | all method and field declarations.
     +-->
    <module name = "InnerTypeLast"/>


    <!--
     | Checks for the placement of left curly braces ('{') for code blocks. Newline policy
     | is enforced.
     +-->
    <module name = "LeftCurly">
      <property name = "option" value = "nl"/>
    </module>


    <!--
     | Checks for long lines. Code convention sets line length limit at 100 characters. We are
     | a little lenient but put a hard max at 105 characters.
     +-->
    <module name = "LineLength">

      <property name = "max" value = "105"/>

      <!--
         Ignore code lines that start with white space characters (zero or more : '^\s*')
         followed by a comment sign '//' with any number of characters behind it.

         Also ignores Javadoc lines that contain a single, non-spaced word. Any line that starts
         with white space characters (zero or more, '^\s*') followed by a '*' character that itself
         is followed by zero or one whitespace, then any number of characters before a next
         whitespace character(s) ('\*\s.*\s*'), is allowed. This ignores Javadoc lines that contain
         a singe long URL for example. In addition, allow a html tag to be included at the end of
         such a long line, for example a paragraph tag. This is added as a group that can contain
         the less than character (specified in unicode value '\u003C' to avoid conflicts with XML
         illegal characters) followed by at least one but at least most 5 characters ('[a-zA-Z]{1,5}')
         and finally the ending greater than character in unicode '\u003E. The whole group can be
         present either zero times or at most once ('{0,1}').

         In the end we get a rather unreadable '^\s*\*\s.*\s*(\u003C[a-zA-Z]{1,5}\u003E\s*){0,1}$'.
      -->
      <property name = "ignorePattern" value = "^\s*//.*$|^\s*\*\s.*\s*(\u003C[a-zA-Z]{1,5}\u003E\s*){0,1}$"/>

    </module>


    <!--
     | Non static field member names must follow the regex convention '^[a-z][a-zA-Z0-9]*$'.
     +-->
    <module name = "MemberName"/>


    <!--
     | Class method names must follow the regex convention '^[a-z][a-zA-Z0-9]*$'.
     +-->
    <module name = "MethodName"/>


    <!--
     | Checks that switch statement always has "default" clause. Even if you cover all current
     | cases, this will protect against later changes, e.g. introduction of new types in an
     | enumeration type.
     +-->
    <module name = "MissingSwitchDefault"/>


    <!--
     | All code blocks must be surrounded by braces.
     +-->
    <module name = "NeedBraces"/>


    <!--
     | Flags multi-line statements such as 'x = 1; y = 2;' as errors.
     +-->
    <module name = "OneStatementPerLine"/>


    <!--
     | Class Foo must be in a file named Foo.java.
     +-->
    <module name = "OuterTypeFilename"/>


    <!--
     | Ensure a class has a package declaration, and package name matches the directory name of
     | the source file.
     +-->
    <module name = "PackageDeclaration"/>


    <!--
     | Package names must follow the regex convention '^[a-z]+(\.[a-z][a-z0-9]*)*$'.
     +-->
    <module name = "PackageName">
      <property name = "format" value = "^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
    </module>


    <!--
     | Parameter names must follow the regex convention '^[a-z][a-zA-Z0-9]*$'.
     +-->
    <module name = "ParameterName"/>


    <!--
     | Padding of parentheses policy; no space is allowd after a left parenthesis or before
     | a right parenthesis.
     +-->
    <module name = "ParenPad"/>


    <!--
     | Disallow redundant import statements:
     |
     |  - warn on duplicate imports
     |  - warn on imports from java.lang package
     |  - warn on imports from the same package as where the class is located
     +-->
    <module name = "RedundantImport"/>


    <!--
     | Static variable names must follow the regex convention '^[a-z][a-zA-Z0-9]*$'.
     +-->
    <module name = "StaticVariableName"/>


    <!--
     | Checks that string literals are not used with == or !=. An equals() comparison should be
     | used instead.
     +-->
    <module name = "StringLiteralEquality"/>


    <!--
     | Warn on unused import statements.
     +-->
    <module name = "UnusedImports"/>


    <!--
     | Ensures long constants are specified with an upper case 'L' instead of lower case 'l' -
     | the latter looks confusing and may look like character '1', for example '100l'.
     +-->
    <module name = "UpperEll"/>


    <!--
     | Enforce whitespace after a comma.
     +-->
    <module name = "WhitespaceAfter">
      <property name = "tokens" value = "COMMA, SEMI"/>
    </module>

  </module>


  <!--
   | Disallows tab characters.
   +-->
  <module name = "FileTabCharacter"/>


</module>
