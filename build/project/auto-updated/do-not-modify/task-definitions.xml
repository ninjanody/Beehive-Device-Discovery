<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright 2013-2015, Juha Lindfors. All rights reserved.

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation; either version 3 of the
  License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public
  License along with this program; if not, see
  http://www.gnu.org/licenses/.

-->

<!--
 |  Customized and prefixed task definitions.
 |
 |  Author: Juha Lindfors
 +-->
<project name = "Project Template Task Definitions" basedir = "."
         xmlns:internal = "namespace://build.repository.openremote.org/project/tasks/internal">


  <!--
   | INTERNAL TASK DEFINITIONS
   |
   | Used as helper definitions but should not be used directly. In URI namespace
   | namespace://build.repository.openremote.org/project/tasks/internal
   +-->

  <!-- Internal configuration for Javac that can be shared with all compile related tasks.
       This one will handle cross-compiles to older Java versions as well. -->

  <presetdef name = "compile" uri = "namespace://build.repository.openremote.org/project/tasks/internal">

    <!--

         Note:
           the bootclasspath attribute in Ant 1.9.2 doesn't seem to catch (is being ignored)
           which strongly feels like a bug. But bootclasspathref works fine, and uses
           the -bootclasspath attribute which is a bit more portable than -Xbootclasspath

           Also the XML quotes in extdirs attribute are necessary, otherwise Ant omits the
           -extdirs option altogether when invoking javac. The empty extdirs is used to ensure
           no unexpected extensions are picked up by the cross-compile.

    -->

    <javac
      encoding = "UTF-8"
      target   = "${java.target.version}"
      source   = "${java.target.version}"
      debug    = "true"
      includeantruntime = "false"
      bootclasspathref  = "java.crosscompile.version.${java.target.version}"
      extdirs  = "&quot;&quot;"
      listfiles = "true">

    </javac>

  </presetdef>

  <!-- Internal definitions for TestNG tasks... -->

  <taskdef resource = "testngtasks" uri = "namespace://build.repository.openremote.org/project/tasks/internal"
           classpath = "${testng.path}/testng-6.8.jar"/>

  <!-- Internal definitions for Cobertura tasks... -->

  <path id = "cobertura.classpath">

    <fileset dir = "${cobertura.path}">

      <!-- Main Cobertura library... -->

      <include name = "cobertura-2.0.3.jar"/>

      <!-- All Cobertura dependencies from separate lib directory... -->

      <include name = "lib/*.jar"/>

    </fileset>

  </path>

  <taskdef resource = "tasks.properties" uri = "namespace://build.repository.openremote.org/project/tasks/internal"
           classpathref = "cobertura.classpath" />


  <!-- Internal definitions for Checkstyle tasks... -->

  <taskdef uri = "namespace://build.repository.openremote.org/project/tasks/internal"
           resource = "com/puppycrawl/tools/checkstyle/antlib.xml"
           classpath = "${checkstyle.path}/checkstyle-5.7-all.jar"/>


  <!--
   | PUBLIC TASK DEFINITIONS
   |
   | Intended for use in the project template. In URI namespace
   | namespace://build.repository.openremote.org/project/tasks
   +-->


  <!-- A public, fixed definition for compiling the full source tree under the default Java
       source directory. -->

  <macrodef name = "compile-java" uri = "namespace://build.repository.openremote.org/project/tasks">

    <sequential>

      <echo>

      Compiling...
      </echo>

      <internal:compile
                srcdir = "${java.src.dir}"
                destdir = "${classes.dir}"
                classpathref = "default.java.compile.classpath"/>

    </sequential>
  </macrodef>


  <!--  A public, fixed definition for compiling the full Java unit test source tree. -->

  <macrodef name = "compile-java-unit-test" uri = "namespace://build.repository.openremote.org/project/tasks">

    <sequential>

      <echo>

      Compiling...
      </echo>

      <internal:compile
                srcdir  = "${test.src.dir}/java"
                destdir = "${test.classes.dir}"
                classpathref = "default.java.test.compile.classpath"/>

    </sequential>

  </macrodef>


  <!-- A public, fixed definition for running a strict Java styleguide checks on the source. -->

  <macrodef name = "java-style-check" uri = "namespace://build.repository.openremote.org/project/tasks">

    <attribute name = "failOnViolation" default = "false"/>

    <sequential>
      <echo>

      Checking Java source conventions...

      </echo>

      <internal:checkstyle
                config = "${project.file.path}/checkstyle-config.xml"
                failOnViolation = "@{failOnViolation}"
                failureProperty = "checkstyle.fail"
                maxErrors = "0">

        <fileset dir = "${java.src.dir}">
          <include name = "**/*.java"/>
          <exclude name = "**/package-info.java"/>
        </fileset>

        <formatter type = "plain" toFile = "${build.dir}/checkstyle-report.txt"/>

      </internal:checkstyle>
    </sequential>

  </macrodef>

  <!-- A public, fixed definition for executing Java unit tests... -->

  <macrodef name = "run-java-unit-test" uri = "namespace://build.repository.openremote.org/project/tasks">

    <sequential>

      <!-- Seems to be necessary to delete to prevent cobertura source highlighting from getting out of sync...-->

      <delete file = "${build.test.dir}/instrumented-classes/cobertura-coverage.ser"/>

      <!-- Instrument classes to track code coverage... -->

      <internal:cobertura-instrument
          todir = "${build.test.dir}/instrumented-classes"
          datafile = "${build.test.dir}/instrumented-classes/cobertura-coverage.ser">

        <fileset dir = "${classes.dir}">
          <include name = "**/*.class"/>
        </fileset>

      </internal:cobertura-instrument>

      <!-- Project dirs and paths as system properties to pass to the TestNG JVM... -->

      <propertyset id = "unit.test.project.properties">
        <propertyref prefix = "project.build"/>
      </propertyset>

      <!-- User defined properties to pass to the TestNG JVM... -->

      <propertyset id = "unit.test.user.properties">
        <propertyref prefix = "unit.test.user"/>
      </propertyset>

      <!-- Include project base dir as an absolute path... -->

      <property name = "project.build.base.dir" location = "${basedir}"/>

      <!-- Run TestNG... -->

      <internal:testng
          classpathref = "java.test.run.classpath"
          outputDir = "${unit.test.report.dir}"
          failureProperty = "java.unit.test.failure"
          suitename = "${project.name} Tests">

        <classfileset dir = "${test.classes.dir}" includes = "**/*.class"/>

        <!-- Where to locate Cobertura coverage data file... -->

        <sysproperty key = "net.sourceforge.cobertura.datafile"
        		         file = "${build.test.dir}/instrumented-classes/cobertura-coverage.ser" />

        <propertyset>
          <propertyset refid = "unit.test.project.properties"/>
          <propertyset refid = "unit.test.user.properties"/>
          <propertyref name = "project.build.base.dir"/>
        </propertyset>

      </internal:testng>

      <!-- Create Cobertura unit test coverage report... -->

      <internal:cobertura-report
          destdir = "${build.test.coverage.dir}"
          datafile = "${build.test.dir}/instrumented-classes/cobertura-coverage.ser"
          srcdir = "${java.src.dir}"
          encoding = "UTF-8"/>

    </sequential>

  </macrodef>


  <!-- Public helper macro for nested property expansion (from Ant FAQ)... -->

  <macrodef name = "propertycopy" uri = "namespace://build.repository.openremote.org/project/tasks">
    <attribute name = "name"/>
    <attribute name = "from"/>

    <sequential>
      <property name="@{name}" value="${@{from}}"/>
    </sequential>

  </macrodef>


  <!--
   |  PATH DEFINITIONS.
   |
   +-->


  <!--
   | Classpath to compile project Java classes. Includes all jars that are placed in the
   | build/lib directory and in the project lib directory. Additional locations may be
   | added by defining a path reference 'java.compile.classpath'.
   +-->
  <path id = "default.java.compile.classpath">

    <!-- User defined classpath in build.xml -->

    <path refid = "java.compile.classpath"/>

    <!-- By default automatically include all jars that are placed under build/lib directory -->

    <fileset dir = "${build.lib.dir}">
      <include name = "**/*.jar"/>
    </fileset>

    <!-- By default automatically include all jars that are placed under project lib directory -->

    <fileset dir = "${lib.dir}">
      <include name = "**/*.jar"/>
    </fileset>

  </path>

  <!--
   | Classpath to compile Java unit tests. Includes the classpath used to compile the project,
   | the compiled project classes and TestNG framework libraries.
   +-->
  <path id = "default.java.test.compile.classpath">

    <!-- The full classpath used to compile classes -->

    <path refid = "default.java.compile.classpath"/>

    <!-- User defined classpath for unit test compilation in build.xml -->

    <path refid = "java.test.compile.classpath"/>

    <!-- Compiled project classes... -->

    <pathelement path = "${classes.dir}"/>

    <!-- TestNG classes... -->

    <pathelement path = "${testng.path}/testng-6.8.jar"/>

  </path>

  <!--
   | Classpath required to execute Java unit test suite.
   +-->
  <path id = "java.test.run.classpath">

    <!-- Instrumented classes must come first in the search order... -->

    <pathelement path = "${build.test.dir}/instrumented-classes"/>

    <!-- All classes required to compile tests... -->

    <path refid = "default.java.test.compile.classpath"/>

    <!-- Compiled Java unit test classes -->

    <pathelement path = "${test.classes.dir}"/>

    <!-- Cobertura classes are required to execute the test suite... -->

    <path refid = "cobertura.classpath"/>

  </path>


  <path id = "java.crosscompile.version.1.6">

    <pathelement path = "${java.runtime.path}/${java.1.6.runtime.directory}/rt.jar"/>

  </path>

</project>

