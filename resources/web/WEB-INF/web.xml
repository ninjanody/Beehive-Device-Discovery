<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright 2013-2015, Juha Lindfors. All rights reserved.

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation; either version 3 of the
  License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public
  License along with this program; if not, see
  http://www.gnu.org/licenses/.
-->


<!--

  Servlet / Web Archive definition for Beehive device discovery service.

  The servlets in this web archive implement a REST API for managing device discovery.
  The servlet / REST API implementation is built using JAX-RS 2.0 API specification and
  corresponding implementation. Therefore only a JAX-RS application servlet is defined
  in this WAR definition.

  The current definition is made against Servlet API specification version 2.5.

  Author: Juha Lindfors

-->
<web-app version = "2.5"
         xmlns = "http://java.sun.com/xml/ns/javaee"
         xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation = "http://java.sun.com/xml/ns/javaee
         http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

    <display-name>Beehive Device Discovery REST API</display-name>



    <!--
    =================================================================================================

      Map servlet Java class implementations to URLs.

      This mapping links the JAX-RS 2.0 implementation to Glassfish Jersey based implementation
      of the API.

    =================================================================================================
    -->


    <servlet>
        <servlet-name>Jersey Servlet Container for Beehive Device Discovery</servlet-name>

        <!-- Jersey implementation -->

        <servlet-class>
            org.glassfish.jersey.servlet.ServletContainer
        </servlet-class>

        <!-- JAX-RS 2.0 configuration to link JAX-RS application -->

        <init-param>
            <param-name>javax.ws.rs.Application</param-name>
            <param-value>org.openremote.beehive.discovery.service.DeviceDiscoveryService</param-value>
        </init-param>

        <load-on-startup>1</load-on-startup>
    </servlet>


    <!--

         URL Mapping:

         As per the Beehive REST API design convention, all REST API calls start with '/rest' path.
         The following '/rpc' path indicates the REST API design style (RPC vs HATEOAS) followed
         by service name path '/devicediscovery' and service API version path '/2/0/0'.

         Therefore a deployment URL might be:

         https://beehive.openremote.org/rest/rpc/devicediscovery/2/0/0/[resource-path]

    -->

    <servlet-mapping>
        <servlet-name>Jersey Servlet Container for Beehive Device Discovery</servlet-name>
        <url-pattern>/rest/rpc/devicediscovery/2/0/0/*</url-pattern>
    </servlet-mapping>



    <!--
    =================================================================================================

      Security Configuration

      This configuration section establishes role-based access to (by default) all of the Device
      Discovery service resources. Each resource access requires at minimum a basic authentication
      to access, and all access must be established via confidential communication channel (e.g.
      HTTPS).

      The two roles set up with discovery service access are 'service-admin' and 'account-owner'.
      The former is used for a typical administrative access. The latter 'account-owner' role
      should be used by the service implementation to restrict access to the authenticated user's
      account only.

    =================================================================================================
    -->


    <security-constraint>

        <display-name>Beehive Device Discovery Security</display-name>

        <!--
             Defines an URL pattern to include all resource access to device discovery service.
             The HTTP method elements are not included meaning all HTTP requests must conform
             to the configured security constraints...
        -->
        <web-resource-collection>

            <web-resource-name>All Service Access to Beehive Device Discovery</web-resource-name>

            <description>
                This configuration constraints all HTTP method access to all of the device
                discovery service resources.
            </description>

            <url-pattern>/rest/rpc/devicediscovery/*</url-pattern>

        </web-resource-collection>


        <!-- User roles required to access device discovery resources... -->

        <auth-constraint>
            <role-name>account-owner</role-name>
        </auth-constraint>

        <!-- Enforce HTTPS access... -->

        <!--
        <user-data-constraint>

            <description>
                All service access requests must arrive through confidential (HTTPS) communication
                channel.
            </description>

            <transport-guarantee>CONFIDENTIAL</transport-guarantee>

        </user-data-constraint>

        -->

    </security-constraint>


    <!-- At minimum, require HTTP Basic authorization... -->

    <login-config>
        <auth-method>BASIC</auth-method>
        <realm-name>BeehiveDeviceDiscovery</realm-name>
    </login-config>


    <!-- Define the security roles... -->

    <security-role>

        <description>
            Service administrators have full access to all operations. Therefore additional
            security policies should be placed on any login using this role
            (restricting IP range, etc.)
        </description>

        <role-name>service-admin</role-name>

    </security-role>

    <security-role>

        <description>
            Account owner is the basic role required to access a user's own account.
        </description>

        <role-name>account-owner</role-name>

    </security-role>

</web-app>
