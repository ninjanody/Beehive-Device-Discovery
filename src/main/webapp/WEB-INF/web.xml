<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">

    <!--
      OpenRemote, the Home of the Digital Home.
      Copyright 2008-2015, OpenRemote Inc.

      See the contributors.txt file in the distribution for a
      full listing of individual contributors.

      This program is free software; you can redistribute it and/or modify
      it under the terms of the GNU Affero General Public License as
      published by the Free Software Foundation; either version 3 of the
      License, or (at your option) any later version.

      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
      GNU Affero General Public License for more details.

      You should have received a copy of the GNU Affero General Public License
      along with this program; if not, see <http://www.gnu.org/licenses/>.
    -->

    <display-name>Beehive Device Discovery REST API</display-name>

    <!--
    =================================================================================================

      Servlet filters for request pre-processing and response post-processing

    =================================================================================================
    -->

    <filter>
        <description>
            Filter to send a notification whenever the state of device discovery knowledge changes.
        </description>
        <filter-name>NotificationFilter</filter-name>
        <filter-class>org.openremote.beehive.discovery.NotificationFilter</filter-class>

        <!--
         | URI where a notification is posted when state of device discovery knowledge changes.
         | If omitted, no notification is posted.
         +-->
        <init-param>
            <param-name>org.openremote.beehive.discovery.notificationURI</param-name>
            <param-value></param-value>
        </init-param>
    </filter>

    <filter>
        <description>
            An automated JPA per-request transaction management
        </description>

        <filter-name>Transaction Management</filter-name>
        <filter-class>org.openremote.beehive.EntityTransactionFilter</filter-class>

        <!--
         | Name of the persistence context used in the transaction management filter.
         | This must be defined in the persistence.xml file.
         +-->
        <init-param>
            <param-name>PersistenceContext</param-name>
            <param-value>Device-Discovery-MySQL</param-value>
        </init-param>

        <!--
         | OPTIONAL:  JPA JDBC driver standard persistence context property. This will override
         |            the property defined in the persistence.xml for the persistence context,
         |            if any is defined.
         +-->
        <init-param>
            <param-name>javax.persistence.jdbc.driver</param-name>
            <param-value>com.mysql.jdbc.Driver</param-value>
        </init-param>

        <!--
         | OPTIONAL:  JPA JDBC URL standard persistence context property. This will override
         |            the property defined in the persistence.xml for the persistence context,
         |            if any is defined.
         +-->
        <init-param>
            <param-name>javax.persistence.jdbc.url</param-name>
            <param-value>jdbc:mysql://localhost:3306/beehive?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</param-value>
        </init-param>

        <!--
         | OPTIONAL:  JPA JDBC user standard persistence context property. This will override
         |            the property defined in the persistence.xml for persistence context,
         |            if any is defined.
         +-->
        <init-param>
            <param-name>javax.persistence.jdbc.user</param-name>
            <param-value>beehive</param-value>
        </init-param>
        <init-param>
            <param-name>javax.persistence.jdbc.password</param-name>
            <param-value>beehive</param-value>
        </init-param>


        <!--
         | Other properties: add other properties for persistence context here, if you want to
         |                   override the properties defined in the persistence.xml (and do not
         |                   wish to modify the persistence.xml directly). E.g. hibernate specific
         |                   properties:
         |
         |                     - hibernate.connection.pool_size
         |                     - hibernate.cache.provider_class
         |                     - hibernate.hbm2ddl.auto
         |
         |                   For each property, add a corresponding entry:
         |
         |                       <init-param>
         |                         <param-name>name</param-name>
         |                         <param-value>value</param-value>
         |                       </init-param>
         |
         |                   Note that only properties starting with prefix 'javax.persistence.' or
         |                   'hibernate.' are accepted.
         +-->

        <init-param>
            <param-name>hibernate.dialect</param-name>
            <param-value>org.hibernate.dialect.MySQLDialect</param-value>
        </init-param>

    </filter>

    <!--
     | Apply notification filter to application servlet.
     | !!! This mapping must be defined before the transaction management servlet
     | as transaction must be committed before notification is sent.
     +-->
    <filter-mapping>
        <filter-name>NotificationFilter</filter-name>
        <servlet-name>Jersey Servlet Container for Beehive Device Discovery</servlet-name>

        <!-- Apply filter for requests originating from the client only -->
        <dispatcher>REQUEST</dispatcher>

    </filter-mapping>

    <!--
     | Apply transaction management to application servlet.
     +-->
    <filter-mapping>
        <filter-name>Transaction Management</filter-name>
        <servlet-name>Jersey Servlet Container for Beehive Device Discovery</servlet-name>

        <!-- Apply filter for requests originating from the client only -->
        <dispatcher>REQUEST</dispatcher>

    </filter-mapping>

    <!--
    =================================================================================================

      Map servlet Java class implementations to URLs.

      This mapping links the JAX-RS 2.0 implementation to Glassfish Jersey based implementation
      of the API.

    =================================================================================================
    -->


    <servlet>
        <servlet-name>Jersey Servlet Container for Beehive Device Discovery</servlet-name>

        <!-- Jersey implementation -->

        <servlet-class>
            org.glassfish.jersey.servlet.ServletContainer
        </servlet-class>

        <!-- JAX-RS 2.0 configuration to link JAX-RS application -->

        <init-param>
            <param-name>javax.ws.rs.Application</param-name>
            <param-value>org.openremote.beehive.discovery.DeviceDiscoveryApplication</param-value>
        </init-param>

        <load-on-startup>1</load-on-startup>
    </servlet>


    <!--

         URL Mapping:

         As per the Beehive REST API design convention, all REST API calls start with '/rest' path.
         The following '/rpc' path indicates the REST API design style (RPC vs HATEOAS) followed
         by service name path '/devicediscovery' and service API version path '/2/0/0'.

         Therefore a deployment URL might be:

         https://beehive.openremote.org/rest/rpc/devicediscovery/2/0/0/[resource-path]

    -->

    <servlet-mapping>
        <servlet-name>Jersey Servlet Container for Beehive Device Discovery</servlet-name>
        <url-pattern>/rest/rpc/devicediscovery/2/0/0/devicediscovery/*</url-pattern>
    </servlet-mapping>



    <!--
    =================================================================================================

      Security Configuration

      This configuration section establishes role-based access to (by default) all of the Device
      Discovery service resources. Each resource access requires at minimum a basic authentication
      to access, and all access must be established via confidential communication channel (e.g.
      HTTPS).

      The two roles set up with discovery service access are 'service-admin' and 'account-owner'.
      The former is used for a typical administrative access. The latter 'account-owner' role
      should be used by the service implementation to restrict access to the authenticated user's
      account only.

    =================================================================================================
    -->


    <security-constraint>

        <display-name>Beehive Device Discovery Security</display-name>

        <!--
             Defines an URL pattern to include all resource access to device discovery service.
             The HTTP method elements are not included meaning all HTTP requests must conform
             to the configured security constraints...
        -->
        <web-resource-collection>

            <web-resource-name>All Service Access to Beehive Device Discovery</web-resource-name>

            <description>
                This configuration constraints all HTTP method access to all of the device
                discovery service resources.
            </description>

            <url-pattern>/rest/rpc/devicediscovery/*</url-pattern>

        </web-resource-collection>


        <!-- User roles required to access device discovery resources... -->

        <auth-constraint>
            <role-name>account-owner</role-name>
        </auth-constraint>

        <!-- Enforce HTTPS access... -->

        <!--
        <user-data-constraint>

            <description>
                All service access requests must arrive through confidential (HTTPS) communication
                channel.
            </description>

            <transport-guarantee>CONFIDENTIAL</transport-guarantee>

        </user-data-constraint>

        -->

    </security-constraint>


    <!-- At minimum, require HTTP Basic authorization... -->

    <login-config>
        <auth-method>BASIC</auth-method>
        <realm-name>BeehiveDeviceDiscovery</realm-name>
    </login-config>


    <!-- Define the security roles... -->

    <security-role>

        <description>
            Service administrators have full access to all operations. Therefore additional
            security policies should be placed on any login using this role
            (restricting IP range, etc.)
        </description>

        <role-name>service-admin</role-name>

    </security-role>

    <security-role>

        <description>
            Account owner is the basic role required to access a user's own account.
        </description>

        <role-name>account-owner</role-name>

    </security-role>

</web-app>
